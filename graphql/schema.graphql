type User {
  id: ID!
  email: String!
  username: String!
  token: String!
}

input SignUpUserInput {
  email: String!
  username: String!
  password: String!
  passwordConfirmation: String!
}

type SignUpUserPayload {
  user: User!
  errors: [String!]
}

input SignInUserInput {
  emailOrUsername: String!
  password: String!
}

type SignInUserPayload {
  user: User!
  errors: [String!]
}

input SignOutUserInput

type SignOutUserPayload {
  isSignOutSuccessful: Boolean
}

input EditUserInput {
  email: String!
  username: String!
  password: String
  passwordConfirmation: String
  currentPassword: String!
  token: String!
}

type EditUserPayload {
  user: User!
  errors: [String!]
}

type Mutation {
  signUpUser(input: SignUpUserInput!): SignUpUserPayload!
  signInUser(input: SignInUserInput!): SignInUserPayload!
  signOutUser(input: SignOutUserInput!): SignOutUserPayload!
  editUser(input: EditUserInput!): EditUserPayload!
}
